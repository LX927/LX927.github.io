		Java面向对象程序设计
第一章 复习
1.数据类型
普通数据：bety、int、short、long、float、docuble、boolean、char
引用数据：String和各种对象构成的数据。

第二章 类和对象
1.类和对象的概念
类：类是有共同特征，共同行为的一类事物的统称。
对象：现实世界客观存在的事物都可看作对象。

2.面向过程和面向对象
	面向过程：分析出解决问题所需要的步骤，然后把这些步骤一步一步实现。
	面向对象：符合人类思考习惯的一种编程思想。这种思想是执行者变为指挥者。提高了代码的复用性及可扩展性。

3.程序的执行过程
	从main方法第一行开始，执行到main方法最后一行结束。

4.类的成员（组成部分）
	○1成员变量
○2构造方法
○3成员方法
○4静态方法
○5代码块
○6静态代码块

5.构造方法
	特点：构造方法的名称与类名相同，没有返回值类型，在没有构造方法时，系统会提供一个无参的方法体为空的构造方法。构造方法分为有参和无参两种。
	作用：调用带参的构造方法创建对象，在创建对象时执行一些初始化操作，如给成员属性赋初值。
	语法：
		public 构造方法名(){
			方法体;
}

6.构造方法的重载
	概念及特点：方法名相同，参数个数或参数类型不同，称为构造方法的重载。
	作用：通过构造方法的重载来实现多种初始化行为，在创建对象时可以根据需要选择合适的构造方法。

	注意：一旦提供了自定义构造方法，系统将不再提供默认构造方法。

7.方法的重载
	概念：一个类中包含两个或以上的方法，它们的方法名相同，参数个数或参数类型不同，则称为方法的重载。
	判断依据：
		○1必须在同一个类里
		○2方法名相同
		○3参数个数或参数类型不同
		○4与方法返回值和方法修饰符没有关系

8.static关键字
作用：static可用来修饰属性、方法和代码块。
	特点：被static修饰的变量和方法称为类变量、类方法。未被static修饰的属性和方法称为实例变量、实例方法。static修饰的变量属于这个类所有，即由这个类创建的所有对象共用一个static变量。
注意：类属性、类方法可以通过类名和对象名访问。实例属性、实例方法只能通过对象名访问。类方法只能访问类属性和其它类方法。静态方法中不能使用this和super关键字。

9.this关键字
	this代表当前对象，即调用此方法的对象，不能在静态方法中使用。

10.代码块和静态代码块
	语法：
		//代码块，每次创建对象时被执行
		{
			System.out.println("代码块被运行");
		}

//静态代码块，在类加载的时候执行，只执行一次，一般用于类的初始化
static{
			System.out.println("静态代码块运行");
		}

第三章 封装
1.封装的概念
	封装是指将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法实现对内部信息的操作访问。
	
	被private修饰的成员，就被类私有化了，被私有化的成员，不能在类的外部访问，只能在类的内部使用。一般用于封装属性。

2.封装的步骤
1、用private修饰属性（成员变量）
2、提供set,get方法，set方法完成对属性的赋值，get方法获取属性的值。
3、加入控制语句

3.不同修饰符的访问权限
 

4.封装的语法格式
	public class Person {
private String name;			//私有化属性
private int age;

		public String getName() {		//获取属性的值
			return name;
		}
		public void setName(String name) {		//对属性赋值
			this.name = name;
		}
		public int getAge() {
			return age;
		}
		public void setAge(int age) {
			if(age>0&&age<=150){		//控制语句
			  this.age = age;
			}else{
			  System.out.println("年纪不合法");
			}
		}
}

第四章 继承
1.继承的说明
	子类继承了父类所有的属性和方法，只不过只能调用父类的非private属性和方法。java中的继承只支持单继承，一个子类只能继承一个父类，但允许多层继承。
	优点：提高了代码的重用性，提高了代码的可扩展性。

2.语法
	修饰符 class 类名 extends 父类名{
		//属性定义
		//方法定义
}

3.继承中的构造方法
	super关键字：
作用：1.充当父类的对象，直接调用父类的方法。2.调用父类的构造方法。

	super();				//调用父类空的构造方法
	super(参数列表);		//调用父类有参的构造方法
	super.方法名(参数列表);//调用父类的方法

	注意：在创建子类对象的过程中，会先调用父类的构造方法，然后执行子类的构造方法。super关键字不能在静态方法中使用。

4.重写
	概念：子类会继承父类中定义过的方法，但有时需要对继承的方法进行一些修改，即对父类的方法进行重写。

	特点：1.重新写从父类继承过来的方法，以满足当前类的需求。2.格式上与父类方法声明保持一致，方法体不一样。

第五章 多态
1.多态的概述
	多态可以理解为一个对象可以有多种形态，在调用时根据包含对象的实际类型（即实际的子类对象）来决定调用哪个方法。
	优点：可替换性、可扩充性、接口性、灵活性、简化性。

2.多态的必要条件
	要有继承，要有重写，父类引用指向子类对象。

3.具体的实现方式
	向上转型：
		<父类型> <引用变量名> = new <子类型>();

		○1父类作为方法的参数：
如果方法的参数是类类型，那么在调用方法传参时，传的参数就是对应类的对象，或者它子类的对象。
如果传入子类的对象，就发生了向上转型。

		○2父类作为方法的返回值类型：
			方法的返回值是类类型，那么返回值为对应类的对象或是它子类的对象。
如果传入它子类的对象，就发生了向上转型

注意：一旦向上转型，那么只能调用到父类声明过的方法，不能调用到自己独有的方法。

	向下转型：
		<子类型> <引用变量名> = (<子类型>) new <父类的引用变量>();

将一个指向子类对象的父类引用赋给一个子类引用，即将父类类型转换为子类类型，称为向下转型，此时必须进行强制类型转换。
			将父类转换为子类，然后才可以调用子类特有的方法。

4.instanceof关键字
//判断父类型对象是否为当前子类型
	if（<父类引用变量> instanceof <子类类型>）{
//把父类型引用变量，强制转换为子类类型，并赋值给子类引用变量
		<子类类型> <子类引用变量> =（<子类类型>）<父类引用变量>;
}

	作用：判断对象的类型，向下转型时，判断父类的类型是哪个子类的对象。

5.try-catch-finally语句
	try{
		//try里边放的是可能产生异常的代码, try会捕获异常

}catch(){
	//catch是处理异常

}finally{
	//无论是否发生异常，finally块中的代码总会被执行
}

第六章 抽象
1.抽象类
	概念：被abstract修饰的类，称为抽象类。
	特点：无构造方法（没有对象），有抽象方法。
	注意：继承抽象类，必须重写抽象类中所有的抽象方法。
	语法：
public abstract class 类名{
		
}

2.抽象方法
概念：被abstract修饰的方法，称为抽象方法。
特点：抽象方法没有方法体，只有方法的声明。
语法：
public abstract 返回值类型 方法名(参数列表);

3.final修饰符
	○1被final修饰方法不能被重写。
○2被final修饰类不能被继承。
○3被final修饰的变量是常量，常量值不能被改变，常量用大写字符串表示。

第七章 接口
1.接口的定义声明
public interface <接口名>{ 
	
}
	
2.接口的作用
	把项目中需要完成的方法，先统一声明一下。

3.接口的实现
	注意：接口中只有常量和抽象方法。
实现一个接口，必须重写接口中所有的抽象方法。否则必须定义为抽象类。
类在继承父类的同时又实现接口时，extends关键字必须位于implements关键字之前。接口不能继承类。
一个类只能有一个父类，称为单继承。
一个类可以实现多个接口，称为多实现。

接口中的属性都会自动用public static final修饰，可简写为：
		常量类型 常量名 = 常量值;

接口中的方法都会自动用public abstract修饰，可简写为：
		返回值类型 抽象方法名(参数列表);

	修饰符 interface 接口名 extends 父接口1，……{	//接口继承接口
		//常量定义
		//方法定义
}

修饰符 class 类名 extends 父类名 implements 接口1，……{	//对象实现接口
	//类成员
}




第八章 集合框架
1.集合概述
	集合用来存储对象，集合分为两大种，单列集合与双列集合。

2.集合与数组的异同
	数组：长度固定，可存储基本数据也可存储对象，必须是相同类型的数据。
	集合：集合的长度可变，只能用于存储对象，对象可以是不同类型。

3.单列集合
特点：单列集合只能存储一列数据。单列集合的总接口为Collection，它的两个子接口为List接口与Set接口。

List接口：存储一组唯一(不允许重复)、无序的对象。
Set接口：存储一组不唯一(允许重复)、有序(以插入次序放置)的对象。

ArrayList集合类实现了List接口，常用的方法有：
	add()		添加元素
	get()		获得元素
	size()		返回元素的个数
	remove()	删除元素
	HashSet集合类实现了Set接口，可通过add()方法添加对象。

4.双列集合
	特点：双列集合能存储一组成对的“键-值对”，可通过key(键)找到value(值)，其中，key不允许重复(如果重复，最后的 “键-值对”将会替换掉原先的“键-值对”)，value允许重复。双列集合总接口为Map。

	HashMap集合类实现了Map接口，常用的方法有：
put()		向集合中添加键值对
get(key)	根据键，获取值，不存在则返回null
keySet()	返回键的集合
values()	返回值的集合
size()		返回元素个数
remove(key)	删除指定的键的“键-值对”

5.封装类
	概念：为了让集合能存储基本数据类型的数据，java把八种基本数据类型封装成类。
	自动装箱、自动拆箱：集合存储基本数据类型的值时，会自动把基本数据类型的值，转换为对象，当取出使用的时候，又把对象转换为基本数据类型的值，这就称为自动装箱，自动拆箱。

	基本数据类型：	对应的封装类：
	int  			Integer
	byte			Byte
	short 			Short
	long 			Long
	float 			Float
	double 			Double
	char 			Character
boolean			Boolean

6.Iterator迭代器
	作用：迭代器用来遍历Set集合类。
	语法：
//把Set集合中的值，复制到迭代器中
		Iterator 迭代器名 = Set集合名.iterator();	
		//遍历迭代器
		while(迭代器名.hasNext()){
			System.out.println(迭代器名.next());
		}

		//hasNext()	判断迭代器中是否有下一个元素，有返回true，无返回false
		//next()	获取下一个元素的值

7.泛型
	作用：限制集合只能存储某一个类的对象。
	语法：
		ArrayList<规定存储对象的类型> 引用集合名 = new ArrayList<…>();
		Map<规定键的类型，规定值的类型>

8.加强for循环
	作用:用来遍历数组或集合。遍历集合的前提是集合要添加泛型。
	语法：
		//把被遍历集合或数组中的元素，依次赋值给i
		for(被遍历对象存储的类型 i : 被遍历的集合或数组){
			System.out.println(i);
		}

第九章 文件操作
1.File类
	File类是IO包中唯一代表磁盘文件本身的对象

	//创建文件或文件夹对象,文件可以存在，也可以不存在
	File file = new File("<文件路径>");

	file. createNewFile();	//创建文件
	file. mkdir();			//创建文件夹
	file. mkdirs();			//一次创建多个文件夹(文件夹目录)
	file. isFile();			//判断是否是文件
	file. isDirectory();	//判断是否是文件夹
	file. exists();			//判断文件是否存在

2.IO流
	IO流的分类：
		按方向分：
输入流：读取文件中的数据。
输出流：向文件中写入数据。
按一次操作的字节个数：
字节流：一次只能读一个字节，能处理所有类型的数据。
字符流：一次可能读多个字节，只能处理字符类型的数据。

3.输出字节流OutputStream类
	通常使用它的子类FileOutputStream类
 
4.输出字符流Writer
	通常使用它的子类FileWriter类

5.输入字节流
6.输入字符流
7.输出字符缓冲流
8.输入字符缓冲流

